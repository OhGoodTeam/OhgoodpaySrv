upstream spring_upstream { server spring:8080; keepalive 64; }
upstream fastapi_upstream { server fastapi:8000; keepalive 64; }

# HTTPS(443) 요청을 HTTP(80)로 리다이렉트
server {
  listen 443 ssl;
  server_name _;
  
  # SSL 인증서 설정 (자체 서명 인증서 사용)
  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
  ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
  
  # 모든 요청을 HTTP로 리다이렉트
  return 301 http://$host$request_uri;
}

server {
  listen 80;
  server_name _;

  # /api/public -> Spring (접두사 제거하지 않음)
  location /api/public/ {
    # CORS 헤더 추가
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    
    # OPTIONS 요청 처리
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Port  $server_port;
    proxy_pass http://spring_upstream;
  }

  # /api -> Spring (나머지 API는 접두사 제거)
  location /api/ {
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host  $host;            # 원본 호스트
    proxy_set_header X-Forwarded-Port  $server_port;     # 원본 포트(443/80)
    proxy_pass http://spring_upstream;
    # /api 접두사 제거
    # proxy_redirect off;
    # rewrite ^/api/?(.*)$ /$1 break;
  }

  # /auth -> Spring (스프링이 /auth 사용 시)
  location /auth/ {
    # CORS 헤더 추가
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    
    # OPTIONS 요청 처리
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host  $host;            # 원본 호스트
    proxy_set_header X-Forwarded-Port  $server_port;     # 원본 포트(443/80)
    proxy_pass http://spring_upstream;
  }

  # /login -> Spring
  # location /login {
  #   proxy_http_version 1.1;
  #   proxy_set_header Host $host;
  #   proxy_set_header X-Real-IP $remote_addr;
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #   proxy_set_header X-Forwarded-Proto $scheme;
  #   proxy_set_header X-Forwarded-Host  $host;
  #   proxy_set_header X-Forwarded-Port  $server_port;
  #   proxy_pass http://spring_upstream;
  # }

  # # /register -> Spring
  # location /register {
  #   proxy_http_version 1.1;
  #   proxy_set_header Host $host;
  #   proxy_set_header X-Real-IP $remote_addr;
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #   proxy_set_header X-Forwarded-Proto $scheme;
  #   proxy_set_header X-Forwarded-Host  $host;
  #   proxy_set_header X-Forwarded-Port  $server_port;
  #   proxy_pass http://spring_upstream;
  # }

  # /ml -> FastAPI (필요 시)
  location /ml/ {
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host  $host;            # 원본 호스트
    proxy_set_header X-Forwarded-Port  $server_port;     # 원본 포트(443/80)
    proxy_pass http://fastapi_upstream;
  }

  # 정적 파일 + SPA
  location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
    root /usr/share/nginx/html;
    expires 7d;
    add_header Cache-Control "public, max-age=604800";
    try_files $uri =404;
  }
  location / {
    root /usr/share/nginx/html;
    try_files $uri /index.html;
  }
}