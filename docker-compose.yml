name: ohgood-stack
services:
  # ---------- Front: Nginx(Vite 정적 배포, HTTP) ----------
  vite:
    build:
      context: . # 레포 루트
      dockerfile: ./srv/vite/Dockerfile.nginx
    ports:
      - "80:80" # HTTP로 접근
      - "443:443" # HTTPS로 접근
    restart: unless-stopped
    logging:
      options: { max-size: "10m", max-file: "5" }
    networks: [backend]

  # ---------- Spring Boot ----------
  spring:
    build:
      context: ./srv/spring
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILE}
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/${MARIADB_DATABASE}?useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=${MARIADB_USER}
      - SPRING_DATASOURCE_PASSWORD=${MARIADB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mariadb
    # (선택) 로컬 확인을 위해 포트 노출
    ports:
      - "8080:8080"
    networks: [backend]
    restart: unless-stopped
    logging:
      options: { max-size: "10m", max-file: "5" }

  # ---------- FastAPI ----------
  fastapi:
    build:
      context: ./srv/fastapi
    environment:
      - UVICORN_WORKERS=2
      # - DATABASE_URL=...
      # - REDIS_URL=redis://redis:6379/0
    # (선택) 로컬 확인을 위해 포트 노출
    ports:
      - "8000:8000"
    networks: [backend]
    restart: unless-stopped
    logging:
      options: { max-size: "10m", max-file: "5" }

  # ---------- MariaDB ----------
  mariadb:
    build:
      context: ./srv/mariadb
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    command:
      [
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_unicode_ci",
        "--max-connections=150",
      ]
    volumes:
      - db-data:/var/lib/mysql
      # - ./mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql:ro   # (이미지에서 COPY 안 한다면 사용)
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 12
    logging:
      options: { max-size: "10m", max-file: "5" }

  # ---------- Redis ----------
  redis:
    build:
      context: ./srv/redis
    volumes:
      - redis-data:/data
    networks: [backend]
    restart: unless-stopped
    logging:
      options: { max-size: "10m", max-file: "5" }

networks:
  backend: {}

volumes:
  db-data: {}
  redis-data: {}
